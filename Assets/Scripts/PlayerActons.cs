//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/PlayerActons.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActons: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActons()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActons"",
    ""maps"": [
        {
            ""name"": ""QuestMode"",
            ""id"": ""0c23ed7c-def3-4ace-b567-cd0a3495a8b3"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3ba11032-d917-48b8-90de-f55267bd9074"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bc7a9468-9e76-4a42-aacf-3ed838bebc2f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb0b6042-d2aa-491b-bbab-2a1cef3cf5ad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb969193-24bc-4755-a772-fd9d6c5f41bd"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""4302841a-4a2f-450a-b211-8301d9616ac1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""03659491-c842-4862-8bef-db996b1e9e1d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7555046-238f-4fc5-a28f-6dd21b29731f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""867331ee-9eb1-49ac-9c18-99ed67c3869a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90fd7e62-829c-42c7-a2fc-0543c72801d7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""71a48fa9-56ed-4b94-a9d6-884b0b3edcbc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ac73c023-eb6f-438a-a978-2837a18e2667"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""42da64e0-205d-449b-bc99-507eaa378983"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75939189-6e74-425f-b3a0-3c068813873c"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4bc49fdc-c332-4f4d-af4b-1197e1816056"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""EditMode"",
            ""id"": ""518aca89-4a46-4ecc-9cba-892f8381cfce"",
            ""actions"": [
                {
                    ""name"": ""Place Asset"",
                    ""type"": ""Button"",
                    ""id"": ""695fb768-b5e5-4d1d-bcf8-9c2a8d08646f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8fa2e4eb-46d9-47f3-905c-14da343c89ae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Asset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c49f514-7a29-4b6b-ba7e-e803d7d97b80"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Asset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard Scheme"",
            ""bindingGroup"": ""Keyboard Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad Scheme"",
            ""bindingGroup"": ""Gamepad Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // QuestMode
        m_QuestMode = asset.FindActionMap("QuestMode", throwIfNotFound: true);
        m_QuestMode_Attack = m_QuestMode.FindAction("Attack", throwIfNotFound: true);
        m_QuestMode_Movement = m_QuestMode.FindAction("Movement", throwIfNotFound: true);
        // EditMode
        m_EditMode = asset.FindActionMap("EditMode", throwIfNotFound: true);
        m_EditMode_PlaceAsset = m_EditMode.FindAction("Place Asset", throwIfNotFound: true);
    }

    ~@PlayerActons()
    {
        UnityEngine.Debug.Assert(!m_QuestMode.enabled, "This will cause a leak and performance issues, PlayerActons.QuestMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_EditMode.enabled, "This will cause a leak and performance issues, PlayerActons.EditMode.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // QuestMode
    private readonly InputActionMap m_QuestMode;
    private List<IQuestModeActions> m_QuestModeActionsCallbackInterfaces = new List<IQuestModeActions>();
    private readonly InputAction m_QuestMode_Attack;
    private readonly InputAction m_QuestMode_Movement;
    public struct QuestModeActions
    {
        private @PlayerActons m_Wrapper;
        public QuestModeActions(@PlayerActons wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_QuestMode_Attack;
        public InputAction @Movement => m_Wrapper.m_QuestMode_Movement;
        public InputActionMap Get() { return m_Wrapper.m_QuestMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuestModeActions set) { return set.Get(); }
        public void AddCallbacks(IQuestModeActions instance)
        {
            if (instance == null || m_Wrapper.m_QuestModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuestModeActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IQuestModeActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IQuestModeActions instance)
        {
            if (m_Wrapper.m_QuestModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuestModeActions instance)
        {
            foreach (var item in m_Wrapper.m_QuestModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuestModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuestModeActions @QuestMode => new QuestModeActions(this);

    // EditMode
    private readonly InputActionMap m_EditMode;
    private List<IEditModeActions> m_EditModeActionsCallbackInterfaces = new List<IEditModeActions>();
    private readonly InputAction m_EditMode_PlaceAsset;
    public struct EditModeActions
    {
        private @PlayerActons m_Wrapper;
        public EditModeActions(@PlayerActons wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceAsset => m_Wrapper.m_EditMode_PlaceAsset;
        public InputActionMap Get() { return m_Wrapper.m_EditMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditModeActions set) { return set.Get(); }
        public void AddCallbacks(IEditModeActions instance)
        {
            if (instance == null || m_Wrapper.m_EditModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditModeActionsCallbackInterfaces.Add(instance);
            @PlaceAsset.started += instance.OnPlaceAsset;
            @PlaceAsset.performed += instance.OnPlaceAsset;
            @PlaceAsset.canceled += instance.OnPlaceAsset;
        }

        private void UnregisterCallbacks(IEditModeActions instance)
        {
            @PlaceAsset.started -= instance.OnPlaceAsset;
            @PlaceAsset.performed -= instance.OnPlaceAsset;
            @PlaceAsset.canceled -= instance.OnPlaceAsset;
        }

        public void RemoveCallbacks(IEditModeActions instance)
        {
            if (m_Wrapper.m_EditModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditModeActions instance)
        {
            foreach (var item in m_Wrapper.m_EditModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditModeActions @EditMode => new EditModeActions(this);
    private int m_KeyboardSchemeSchemeIndex = -1;
    public InputControlScheme KeyboardSchemeScheme
    {
        get
        {
            if (m_KeyboardSchemeSchemeIndex == -1) m_KeyboardSchemeSchemeIndex = asset.FindControlSchemeIndex("Keyboard Scheme");
            return asset.controlSchemes[m_KeyboardSchemeSchemeIndex];
        }
    }
    private int m_GamepadSchemeSchemeIndex = -1;
    public InputControlScheme GamepadSchemeScheme
    {
        get
        {
            if (m_GamepadSchemeSchemeIndex == -1) m_GamepadSchemeSchemeIndex = asset.FindControlSchemeIndex("Gamepad Scheme");
            return asset.controlSchemes[m_GamepadSchemeSchemeIndex];
        }
    }
    public interface IQuestModeActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IEditModeActions
    {
        void OnPlaceAsset(InputAction.CallbackContext context);
    }
}
